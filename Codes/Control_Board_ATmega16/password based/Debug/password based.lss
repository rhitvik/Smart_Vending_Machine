
password based.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00000b30  00000bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080016e  0080016e  00000cd2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00001428  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001995  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000221  00000000  00000000  00002e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085f  00000000  00000000  0000305e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  000038c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000586  00000000  00000000  00003b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e7  00000000  00000000  00004092  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 74 04 	call	0x8e8	; 0x8e8 <main>
  8a:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z16detect_key_pressv>:
}
void detect_key_press(void)
{
	 while(1)
	 {
		 if (bit_is_clear(PIND,0))
  92:	80 b3       	in	r24, 0x10	; 16
  94:	80 ff       	sbrs	r24, 0
  96:	07 c0       	rjmp	.+14     	; 0xa6 <_Z16detect_key_pressv+0x14>
			 row = 1;
			 pressed = 1;
			 break;
		 }
		 else
		 if (bit_is_clear(PIND,1))
  98:	81 9b       	sbis	0x10, 1	; 16
  9a:	0d c0       	rjmp	.+26     	; 0xb6 <_Z16detect_key_pressv+0x24>
			 row = 2;
			 pressed = 1;
			 break;
		 }
		 else
		 if (bit_is_clear(PIND,2))
  9c:	82 9b       	sbis	0x10, 2	; 16
  9e:	14 c0       	rjmp	.+40     	; 0xc8 <_Z16detect_key_pressv+0x36>
			 row = 3;
			 pressed = 1;
			 break;
		 }
		 else
		 if (bit_is_clear(PIND,3))
  a0:	83 99       	sbic	0x10, 3	; 16
  a2:	22 c0       	rjmp	.+68     	; 0xe8 <_Z16detect_key_pressv+0x56>
  a4:	1a c0       	rjmp	.+52     	; 0xda <_Z16detect_key_pressv+0x48>
{
	 while(1)
	 {
		 if (bit_is_clear(PIND,0))
		 {
			 row = 1;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 81 01 	sts	0x0181, r24
			 pressed = 1;
  ac:	80 93 82 01 	sts	0x0182, r24
			 break;
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <_Z16detect_key_pressv+0x66>
		 }
		 else
		 if (bit_is_clear(PIND,1))
  b2:	81 99       	sbic	0x10, 1	; 16
  b4:	07 c0       	rjmp	.+14     	; 0xc4 <_Z16detect_key_pressv+0x32>
		 {
			 row = 2;
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	80 93 81 01 	sts	0x0181, r24
			 pressed = 1;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 82 01 	sts	0x0182, r24
			 break;
  c2:	1a c0       	rjmp	.+52     	; 0xf8 <_Z16detect_key_pressv+0x66>
		 }
		 else
		 if (bit_is_clear(PIND,2))
  c4:	82 99       	sbic	0x10, 2	; 16
  c6:	07 c0       	rjmp	.+14     	; 0xd6 <_Z16detect_key_pressv+0x44>
		 {
			 row = 3;
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	80 93 81 01 	sts	0x0181, r24
			 pressed = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 82 01 	sts	0x0182, r24
			 break;
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <_Z16detect_key_pressv+0x66>
		 }
		 else
		 if (bit_is_clear(PIND,3))
  d6:	83 99       	sbic	0x10, 3	; 16
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <_Z16detect_key_pressv+0x56>
		 {
			 row = 4;
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	80 93 81 01 	sts	0x0181, r24
			 pressed = 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 82 01 	sts	0x0182, r24
			 break;
  e6:	08 c0       	rjmp	.+16     	; 0xf8 <_Z16detect_key_pressv+0x66>
		 }
		 else
		 {
			 PORTD &=~ (1<<PIND4);
  e8:	94 98       	cbi	0x12, 4	; 18
			 PORTD &=~ (1<<PIND5);
  ea:	95 98       	cbi	0x12, 5	; 18
			 PORTD &=~ (1<<PIND6);
  ec:	96 98       	cbi	0x12, 6	; 18
			 PORTD &=~ (1<<PIND7);
  ee:	97 98       	cbi	0x12, 7	; 18
}
void detect_key_press(void)
{
	 while(1)
	 {
		 if (bit_is_clear(PIND,0))
  f0:	80 b3       	in	r24, 0x10	; 16
  f2:	80 fd       	sbrc	r24, 0
  f4:	de cf       	rjmp	.-68     	; 0xb2 <_Z16detect_key_pressv+0x20>
  f6:	d7 cf       	rjmp	.-82     	; 0xa6 <_Z16detect_key_pressv+0x14>
		 }
	 }
	 
	 while(2)
	 {
		 PORTD |= (1<<PIND4);
  f8:	94 9a       	sbi	0x12, 4	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	89 ef       	ldi	r24, 0xF9	; 249
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <_Z16detect_key_pressv+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <_Z16detect_key_pressv+0x72>
 104:	00 00       	nop
		 _delay_ms(1);
		 if (bit_is_set(PIND,0) && bit_is_set(PIND,1) && bit_is_set(PIND,2) && bit_is_set(PIND,3))
 106:	80 9b       	sbis	0x10, 0	; 16
 108:	2c c0       	rjmp	.+88     	; 0x162 <_Z16detect_key_pressv+0xd0>
 10a:	81 9b       	sbis	0x10, 1	; 16
 10c:	2a c0       	rjmp	.+84     	; 0x162 <_Z16detect_key_pressv+0xd0>
 10e:	82 9b       	sbis	0x10, 2	; 16
 110:	28 c0       	rjmp	.+80     	; 0x162 <_Z16detect_key_pressv+0xd0>
 112:	83 9b       	sbis	0x10, 3	; 16
 114:	26 c0       	rjmp	.+76     	; 0x162 <_Z16detect_key_pressv+0xd0>
		 {
			 column = 1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 80 01 	sts	0x0180, r24
			 PORTD &=~ (1<<PIND4);
 11c:	94 98       	cbi	0x12, 4	; 18
			 break;
 11e:	08 95       	ret
		 }
		 else
		 
		 PORTD |= (1<<PIND5);
		 _delay_ms(1);
		 if (bit_is_set(PIND,0) && bit_is_set(PIND,1) && bit_is_set(PIND,2) && bit_is_set(PIND,3))
 120:	81 9b       	sbis	0x10, 1	; 16
 122:	28 c0       	rjmp	.+80     	; 0x174 <_Z16detect_key_pressv+0xe2>
 124:	82 9b       	sbis	0x10, 2	; 16
 126:	26 c0       	rjmp	.+76     	; 0x174 <_Z16detect_key_pressv+0xe2>
 128:	83 9b       	sbis	0x10, 3	; 16
 12a:	24 c0       	rjmp	.+72     	; 0x174 <_Z16detect_key_pressv+0xe2>
		 {
			 column = 2;
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 80 01 	sts	0x0180, r24
			 PORTD &=~ (1<<PIND5);
 132:	95 98       	cbi	0x12, 5	; 18
			 break;
 134:	08 95       	ret
		 }
		 
		 PORTD |= (1<<PIND6);
		 _delay_ms(1);
		 if (bit_is_set(PIND,0) && bit_is_set(PIND,1) && bit_is_set(PIND,2) && bit_is_set(PIND,3))
 136:	81 9b       	sbis	0x10, 1	; 16
 138:	26 c0       	rjmp	.+76     	; 0x186 <_Z16detect_key_pressv+0xf4>
 13a:	82 9b       	sbis	0x10, 2	; 16
 13c:	24 c0       	rjmp	.+72     	; 0x186 <_Z16detect_key_pressv+0xf4>
 13e:	83 9b       	sbis	0x10, 3	; 16
 140:	22 c0       	rjmp	.+68     	; 0x186 <_Z16detect_key_pressv+0xf4>
		 {
			 column = 3;
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	80 93 80 01 	sts	0x0180, r24
			 PORTD &=~ (1<<PIND6);
 148:	96 98       	cbi	0x12, 6	; 18
			 break;
 14a:	08 95       	ret
		 else
		 
		 PORTD |= (1<<PIND7);
		 _delay_ms(1);
		 
		 if (bit_is_set(PIND,0) && bit_is_set(PIND,1) && bit_is_set(PIND,2) && bit_is_set(PIND,3))
 14c:	81 9b       	sbis	0x10, 1	; 16
 14e:	d4 cf       	rjmp	.-88     	; 0xf8 <_Z16detect_key_pressv+0x66>
 150:	82 9b       	sbis	0x10, 2	; 16
 152:	d2 cf       	rjmp	.-92     	; 0xf8 <_Z16detect_key_pressv+0x66>
 154:	83 9b       	sbis	0x10, 3	; 16
 156:	d0 cf       	rjmp	.-96     	; 0xf8 <_Z16detect_key_pressv+0x66>
		 {
			 column = 4;
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	80 93 80 01 	sts	0x0180, r24
			 PORTD &=~ (1<<PIND7);
 15e:	97 98       	cbi	0x12, 7	; 18
			 break;
 160:	08 95       	ret
			 PORTD &=~ (1<<PIND4);
			 break;
		 }
		 else
		 
		 PORTD |= (1<<PIND5);
 162:	95 9a       	sbi	0x12, 5	; 18
 164:	89 ef       	ldi	r24, 0xF9	; 249
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <_Z16detect_key_pressv+0xd6>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <_Z16detect_key_pressv+0xdc>
 16e:	00 00       	nop
		 _delay_ms(1);
		 if (bit_is_set(PIND,0) && bit_is_set(PIND,1) && bit_is_set(PIND,2) && bit_is_set(PIND,3))
 170:	80 99       	sbic	0x10, 0	; 16
 172:	d6 cf       	rjmp	.-84     	; 0x120 <_Z16detect_key_pressv+0x8e>
			 column = 2;
			 PORTD &=~ (1<<PIND5);
			 break;
		 }
		 
		 PORTD |= (1<<PIND6);
 174:	96 9a       	sbi	0x12, 6	; 18
 176:	89 ef       	ldi	r24, 0xF9	; 249
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <_Z16detect_key_pressv+0xe8>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <_Z16detect_key_pressv+0xee>
 180:	00 00       	nop
		 _delay_ms(1);
		 if (bit_is_set(PIND,0) && bit_is_set(PIND,1) && bit_is_set(PIND,2) && bit_is_set(PIND,3))
 182:	80 99       	sbic	0x10, 0	; 16
 184:	d8 cf       	rjmp	.-80     	; 0x136 <_Z16detect_key_pressv+0xa4>
			 PORTD &=~ (1<<PIND6);
			 break;
		 }
		 else
		 
		 PORTD |= (1<<PIND7);
 186:	97 9a       	sbi	0x12, 7	; 18
 188:	89 ef       	ldi	r24, 0xF9	; 249
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <_Z16detect_key_pressv+0xfa>
 190:	00 c0       	rjmp	.+0      	; 0x192 <_Z16detect_key_pressv+0x100>
 192:	00 00       	nop
		 _delay_ms(1);
		 
		 if (bit_is_set(PIND,0) && bit_is_set(PIND,1) && bit_is_set(PIND,2) && bit_is_set(PIND,3))
 194:	80 99       	sbic	0x10, 0	; 16
 196:	da cf       	rjmp	.-76     	; 0x14c <_Z16detect_key_pressv+0xba>
 198:	af cf       	rjmp	.-162    	; 0xf8 <_Z16detect_key_pressv+0x66>

0000019a <_Z10detect_keyv>:
		 }
	 }
}
void detect_key(void)
{	
	if (row == 1 && column == 1)
 19a:	80 91 81 01 	lds	r24, 0x0181
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	c9 f4       	brne	.+50     	; 0x1d4 <_Z10detect_keyv+0x3a>
 1a2:	90 91 80 01 	lds	r25, 0x0180
 1a6:	91 30       	cpi	r25, 0x01	; 1
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <_Z10detect_keyv+0x16>
	{
		pressed_key = 1;
 1aa:	80 93 7e 01 	sts	0x017E, r24
 1ae:	08 95       	ret
	}
	else
	if (row == 1 && column == 2)
 1b0:	92 30       	cpi	r25, 0x02	; 2
 1b2:	21 f4       	brne	.+8      	; 0x1bc <_Z10detect_keyv+0x22>
	{
		pressed_key = 2;
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	80 93 7e 01 	sts	0x017E, r24
 1ba:	08 95       	ret
	}
	else
	if (row == 1 && column == 3)
 1bc:	93 30       	cpi	r25, 0x03	; 3
 1be:	21 f4       	brne	.+8      	; 0x1c8 <_Z10detect_keyv+0x2e>
	{
		pressed_key = 3;
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	80 93 7e 01 	sts	0x017E, r24
 1c6:	08 95       	ret
	}
	else
	if (row == 1 && column == 4)
 1c8:	94 30       	cpi	r25, 0x04	; 4
 1ca:	e1 f5       	brne	.+120    	; 0x244 <_Z10detect_keyv+0xaa>
	{
		pressed_key = 'A';
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	80 93 7e 01 	sts	0x017E, r24
 1d2:	08 95       	ret
	}
	else
	if (row == 2 && column == 1)
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	d1 f4       	brne	.+52     	; 0x20c <_Z10detect_keyv+0x72>
 1d8:	80 91 80 01 	lds	r24, 0x0180
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	21 f4       	brne	.+8      	; 0x1e8 <_Z10detect_keyv+0x4e>
	{
		pressed_key = 4;
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	80 93 7e 01 	sts	0x017E, r24
 1e6:	08 95       	ret
	}
	else
	if (row == 2 && column == 2)
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	21 f4       	brne	.+8      	; 0x1f4 <_Z10detect_keyv+0x5a>
	{
		pressed_key = 5;
 1ec:	85 e0       	ldi	r24, 0x05	; 5
 1ee:	80 93 7e 01 	sts	0x017E, r24
 1f2:	08 95       	ret
	}
	else
	if (row == 2 && column == 3)
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	21 f4       	brne	.+8      	; 0x200 <_Z10detect_keyv+0x66>
	{
		pressed_key = 6;
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	80 93 7e 01 	sts	0x017E, r24
 1fe:	08 95       	ret
	}
	else
	if (row == 2 && column == 4)
 200:	84 30       	cpi	r24, 0x04	; 4
 202:	d1 f5       	brne	.+116    	; 0x278 <_Z10detect_keyv+0xde>
	{
		pressed_key = 'B';
 204:	82 e4       	ldi	r24, 0x42	; 66
 206:	80 93 7e 01 	sts	0x017E, r24
 20a:	08 95       	ret
	}
	else
	if (row == 3 && column == 1)
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	d1 f4       	brne	.+52     	; 0x244 <_Z10detect_keyv+0xaa>
 210:	80 91 80 01 	lds	r24, 0x0180
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	21 f4       	brne	.+8      	; 0x220 <_Z10detect_keyv+0x86>
	{
		pressed_key = 7;
 218:	87 e0       	ldi	r24, 0x07	; 7
 21a:	80 93 7e 01 	sts	0x017E, r24
 21e:	08 95       	ret
	}
	else
	if (row == 3 && column == 2)
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	21 f4       	brne	.+8      	; 0x22c <_Z10detect_keyv+0x92>
	{
		pressed_key = 8;
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	80 93 7e 01 	sts	0x017E, r24
 22a:	08 95       	ret
	}
	else
	if (row == 3 && column == 3)
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	21 f4       	brne	.+8      	; 0x238 <_Z10detect_keyv+0x9e>
	{
		pressed_key = 9;
 230:	89 e0       	ldi	r24, 0x09	; 9
 232:	80 93 7e 01 	sts	0x017E, r24
 236:	08 95       	ret
	}
	else
	if (row == 3 && column == 4)
 238:	84 30       	cpi	r24, 0x04	; 4
 23a:	f1 f4       	brne	.+60     	; 0x278 <_Z10detect_keyv+0xde>
	{
		pressed_key = 'C';
 23c:	83 e4       	ldi	r24, 0x43	; 67
 23e:	80 93 7e 01 	sts	0x017E, r24
 242:	08 95       	ret
	}
	else
	if (row == 4 && column == 1)
 244:	84 30       	cpi	r24, 0x04	; 4
 246:	c1 f4       	brne	.+48     	; 0x278 <_Z10detect_keyv+0xde>
 248:	80 91 80 01 	lds	r24, 0x0180
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	21 f4       	brne	.+8      	; 0x258 <_Z10detect_keyv+0xbe>
	{
		pressed_key = 'Q';
 250:	81 e5       	ldi	r24, 0x51	; 81
 252:	80 93 7e 01 	sts	0x017E, r24
 256:	08 95       	ret
	}
	else
	if (row == 4 && column == 2)
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	19 f4       	brne	.+6      	; 0x262 <_Z10detect_keyv+0xc8>
	{
		pressed_key = 0;
 25c:	10 92 7e 01 	sts	0x017E, r1
 260:	08 95       	ret
	}
	else
	if (row == 4 && column == 3)
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	21 f4       	brne	.+8      	; 0x26e <_Z10detect_keyv+0xd4>
	{
		pressed_key = 'R';
 266:	82 e5       	ldi	r24, 0x52	; 82
 268:	80 93 7e 01 	sts	0x017E, r24
 26c:	08 95       	ret
	}
	else
	if (row == 4 && column == 4)
 26e:	84 30       	cpi	r24, 0x04	; 4
 270:	19 f4       	brne	.+6      	; 0x278 <_Z10detect_keyv+0xde>
	{
		pressed_key = 'D';
 272:	84 e4       	ldi	r24, 0x44	; 68
 274:	80 93 7e 01 	sts	0x017E, r24
 278:	08 95       	ret

0000027a <_Z9OTP_functv>:
		
	}
}
void OTP_funct(void)
{
	OTP[i] = pressed_key;
 27a:	80 91 6c 01 	lds	r24, 0x016C
 27e:	90 91 6d 01 	lds	r25, 0x016D
 282:	fc 01       	movw	r30, r24
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	ec 58       	subi	r30, 0x8C	; 140
 28a:	fe 4f       	sbci	r31, 0xFE	; 254
 28c:	20 91 7e 01 	lds	r18, 0x017E
 290:	20 83       	st	Z, r18
 292:	11 82       	std	Z+1, r1	; 0x01
	i--;
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	90 93 6d 01 	sts	0x016D, r25
 29a:	80 93 6c 01 	sts	0x016C, r24
	if (i == 0)
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	49 f4       	brne	.+18     	; 0x2b4 <_Z9OTP_functv+0x3a>
	{
		i = 4;
 2a2:	84 e0       	ldi	r24, 0x04	; 4
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	90 93 6d 01 	sts	0x016D, r25
 2aa:	80 93 6c 01 	sts	0x016C, r24
		commParameter = true;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 7f 01 	sts	0x017F, r24
 2b4:	08 95       	ret

000002b6 <_Z25spi_init_master_INTERRUPTv>:
// Initialize SPI Master Device (with SPI interrupt)
void spi_init_master_INTERRUPT (void)
{
	// Set MOSI, SCK as Output
	
	DDRB |= (1<<PINB5)|(1<<PINB7);
 2b6:	87 b3       	in	r24, 0x17	; 23
 2b8:	80 6a       	ori	r24, 0xA0	; 160
 2ba:	87 bb       	out	0x17, r24	; 23
	
	DDRB &=~ (1<<PINB6);
 2bc:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1<<PINB6);
 2be:	c6 9a       	sbi	0x18, 6	; 24
	// Enable SPI, Set as Master
	// Prescaler: Fosc/16, Enable Interrupts
	//The MOSI, SCK pins are as per ATMega8
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPIE);
 2c0:	8d b1       	in	r24, 0x0d	; 13
 2c2:	81 6d       	ori	r24, 0xD1	; 209
 2c4:	8d b9       	out	0x0d, r24	; 13
	
	// Enable Global Interrupts
	//sei();
}
 2c6:	08 95       	ret

000002c8 <_Z15spi_init_masterv>:
// Initialize SPI Master Device (without interrupt)
void spi_init_master (void)
{
	// Set MOSI, SCK as Output
	DDRB |= (1<<PINB5)|(1<<PINB7);
 2c8:	87 b3       	in	r24, 0x17	; 23
 2ca:	80 6a       	ori	r24, 0xA0	; 160
 2cc:	87 bb       	out	0x17, r24	; 23
	
	DDRB &=~ (1<<PINB6);
 2ce:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1<<PINB6);
 2d0:	c6 9a       	sbi	0x18, 6	; 24
	// Enable SPI, Set as Master
	//Prescaler: Fosc/16, Enable Interrupts
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 2d2:	8d b1       	in	r24, 0x0d	; 13
 2d4:	81 65       	ori	r24, 0x51	; 81
 2d6:	8d b9       	out	0x0d, r24	; 13
}
 2d8:	08 95       	ret

000002da <_Z14spi_init_slavev>:
// Initialize SPI Slave Device
void spi_init_slave (void)
{
	DDRB |= (1<<PINB6);     //MISO as OUTPUT
 2da:	be 9a       	sbi	0x17, 6	; 23
	PORTB &=~ (1<<PINB6);
 2dc:	c6 98       	cbi	0x18, 6	; 24
		
	DDRB &=~ (1<<PINB5);	//MOSI as input
 2de:	bd 98       	cbi	0x17, 5	; 23
	PORTB |= (1<<PINB5);
 2e0:	c5 9a       	sbi	0x18, 5	; 24
	
	DDRB &=~ (1<<PINB4);	//SS as input
 2e2:	bc 98       	cbi	0x17, 4	; 23
	PORTB |= (1<<PINB4);
 2e4:	c4 9a       	sbi	0x18, 4	; 24
	
	DDRB &=~ (1<<PINB7);	//SCK as input
 2e6:	bf 98       	cbi	0x17, 7	; 23
	PORTB |= (1<<PINB7);
 2e8:	c7 9a       	sbi	0x18, 7	; 24
	
	SPCR |= (1<<SPE);		//Enable SPI
 2ea:	6e 9a       	sbi	0x0d, 6	; 13
	SPCR &=~ (1<<MSTR);		// disable master control
 2ec:	6c 98       	cbi	0x0d, 4	; 13
}
 2ee:	08 95       	ret

000002f0 <_Z14spi_tranceiverh>:
//Function to send and receive data for both master and slave
char spi_tranceiver (unsigned char data)
{
	// Load data into the buffer
	SPDR = data;
 2f0:	8f b9       	out	0x0f, r24	; 15
	
	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF) ));
 2f2:	77 9b       	sbis	0x0e, 7	; 14
 2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <_Z14spi_tranceiverh+0x2>
	
	// Return received data
	return SPDR;
 2f6:	8f b1       	in	r24, 0x0f	; 15
}
 2f8:	08 95       	ret

000002fa <_Z13COMM_Functionv>:
		commParameter = true;
	}
}
void COMM_Function(void)
{
	if (commParameter == true)
 2fa:	80 91 7f 01 	lds	r24, 0x017F
 2fe:	88 23       	and	r24, r24
 300:	c1 f0       	breq	.+48     	; 0x332 <_Z13COMM_Functionv+0x38>
	{
		commParameter = false;
 302:	10 92 7f 01 	sts	0x017F, r1
		
		spi_tranceiver(255);
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z14spi_tranceiverh>
			
		spi_tranceiver(OTP[4]);
 30c:	80 91 7c 01 	lds	r24, 0x017C
 310:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z14spi_tranceiverh>
		spi_tranceiver(OTP[3]);
 314:	80 91 7a 01 	lds	r24, 0x017A
 318:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z14spi_tranceiverh>
		spi_tranceiver(OTP[2]);
 31c:	80 91 78 01 	lds	r24, 0x0178
 320:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z14spi_tranceiverh>
		spi_tranceiver(OTP[1]);
 324:	80 91 76 01 	lds	r24, 0x0176
 328:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z14spi_tranceiverh>
			
		spi_tranceiver('X');				
 32c:	88 e5       	ldi	r24, 0x58	; 88
 32e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z14spi_tranceiverh>
 332:	08 95       	ret

00000334 <_Z15spi_kill_masterv>:
}
//kill spi
void spi_kill_master(void)
{
	// Set MOSI, SCK as Output
	DDRB |= (1<<PINB5)|(1<<PINB7);
 334:	87 b3       	in	r24, 0x17	; 23
 336:	80 6a       	ori	r24, 0xA0	; 160
 338:	87 bb       	out	0x17, r24	; 23
	
	DDRB &=~ (1<<PINB6);
 33a:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1<<PINB6);
 33c:	c6 9a       	sbi	0x18, 6	; 24
	// Enable SPI, Set as Master
	//Prescaler: Fosc/16, Enable Interrupts
	SPCR &=~ (1<<SPE);
 33e:	6e 98       	cbi	0x0d, 6	; 13
	SPCR &=~ (1<<MSTR);
 340:	6c 98       	cbi	0x0d, 4	; 13
	SPCR &=~ (1<<SPR0);
 342:	68 98       	cbi	0x0d, 0	; 13
}
 344:	08 95       	ret

00000346 <_Z14spi_kill_slavev>:
void spi_kill_slave(void)
{
	DDRB |= (1<<PINB6);     //MISO as OUTPUT
 346:	be 9a       	sbi	0x17, 6	; 23
	
	DDRB &=~ (1<<PINB5);
 348:	bd 98       	cbi	0x17, 5	; 23
	PORTB |= (1<<PINB5);
 34a:	c5 9a       	sbi	0x18, 5	; 24
	
	DDRB &=~ (1<<PINB7);
 34c:	bf 98       	cbi	0x17, 7	; 23
	PORTB |= (1<<PINB7);
 34e:	c7 9a       	sbi	0x18, 7	; 24
	
	SPCR &=~ (1<<SPE);   //disable SPI
 350:	6e 98       	cbi	0x0d, 6	; 13
	SPCR &=~ (1<<MSTR);
 352:	6c 98       	cbi	0x0d, 4	; 13
}
 354:	08 95       	ret

00000356 <_Z10Peek_A_Boov>:
	
	DataDir_MrLCDsCrib=0xFF;
}
void Peek_A_Boo(void)
{
	MrLCDsControl |= 1<<LightSwitch;
 356:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	8a 95       	dec	r24
 35c:	f1 f7       	brne	.-4      	; 0x35a <_Z10Peek_A_Boov+0x4>
 35e:	00 00       	nop
	_delay_us(10);/////CALIBRATE IT FURTHER
	MrLCDsControl &=~  1<<LightSwitch;
 360:	c0 98       	cbi	0x18, 0	; 24
} 
 362:	08 95       	ret

00000364 <_Z21Check_IF_MrLCD_isBusyv>:
	SPCR &=~ (1<<MSTR);
}
/////////////////
void Check_IF_MrLCD_isBusy(void)
{
	DataDir_MrLCDsCrib=0;
 364:	1a ba       	out	0x1a, r1	; 26
	MrLCDsControl |= 1<<ReadWrite;
 366:	c1 9a       	sbi	0x18, 1	; 24
	MrLCDsControl &=~ 1<<BiPolarMood;
 368:	88 b3       	in	r24, 0x18	; 24
 36a:	88 7f       	andi	r24, 0xF8	; 248
 36c:	88 bb       	out	0x18, r24	; 24
	
	while(MrLCDsCrib >= 0x80)
 36e:	df 9b       	sbis	0x1b, 7	; 27
 370:	04 c0       	rjmp	.+8      	; 0x37a <_Z21Check_IF_MrLCD_isBusyv+0x16>
	{
		Peek_A_Boo();
 372:	0e 94 ab 01 	call	0x356	; 0x356 <_Z10Peek_A_Boov>
{
	DataDir_MrLCDsCrib=0;
	MrLCDsControl |= 1<<ReadWrite;
	MrLCDsControl &=~ 1<<BiPolarMood;
	
	while(MrLCDsCrib >= 0x80)
 376:	df 99       	sbic	0x1b, 7	; 27
 378:	fc cf       	rjmp	.-8      	; 0x372 <_Z21Check_IF_MrLCD_isBusyv+0xe>
	{
		Peek_A_Boo();
	}
	
	DataDir_MrLCDsCrib=0xFF;
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	8a bb       	out	0x1a, r24	; 26
}
 37e:	08 95       	ret

00000380 <_Z14Send_A_Commandc>:
	MrLCDsControl |= 1<<LightSwitch;
	_delay_us(10);/////CALIBRATE IT FURTHER
	MrLCDsControl &=~  1<<LightSwitch;
} 
void Send_A_Command(char command)
{
 380:	cf 93       	push	r28
 382:	c8 2f       	mov	r28, r24
	Check_IF_MrLCD_isBusy();
 384:	0e 94 b2 01 	call	0x364	; 0x364 <_Z21Check_IF_MrLCD_isBusyv>
	MrLCDsCrib = command;
 388:	cb bb       	out	0x1b, r28	; 27
	MrLCDsControl &=~ (1<<ReadWrite|1<<BiPolarMood);
 38a:	88 b3       	in	r24, 0x18	; 24
 38c:	89 7f       	andi	r24, 0xF9	; 249
 38e:	88 bb       	out	0x18, r24	; 24
	Peek_A_Boo();
 390:	0e 94 ab 01 	call	0x356	; 0x356 <_Z10Peek_A_Boov>
	MrLCDsCrib = 0;
 394:	1b ba       	out	0x1b, r1	; 27
}
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <_Z16Send_A_Characterc>:
void Send_A_Character(char character)
{
 39a:	cf 93       	push	r28
 39c:	c8 2f       	mov	r28, r24
	Check_IF_MrLCD_isBusy();
 39e:	0e 94 b2 01 	call	0x364	; 0x364 <_Z21Check_IF_MrLCD_isBusyv>
	MrLCDsCrib = character;
 3a2:	cb bb       	out	0x1b, r28	; 27
	MrLCDsControl &=~ (1<<ReadWrite);
 3a4:	c1 98       	cbi	0x18, 1	; 24
	MrLCDsControl |= (1<<BiPolarMood);
 3a6:	c2 9a       	sbi	0x18, 2	; 24
	Peek_A_Boo();
 3a8:	0e 94 ab 01 	call	0x356	; 0x356 <_Z10Peek_A_Boov>
	MrLCDsCrib = 0;
 3ac:	1b ba       	out	0x1b, r1	; 27
}
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <_Z18delete_a_characterPc>:
void delete_a_character(char *character)
{
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	ec 01       	movw	r28, r24
	while(*character > 0)
 3b8:	88 81       	ld	r24, Y
 3ba:	88 23       	and	r24, r24
 3bc:	61 f0       	breq	.+24     	; 0x3d6 <_Z18delete_a_characterPc+0x24>
	{
		*character--;
		Send_A_Character(*character);
 3be:	8a 91       	ld	r24, -Y
 3c0:	0e 94 cd 01 	call	0x39a	; 0x39a <_Z16Send_A_Characterc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c4:	89 ef       	ldi	r24, 0xF9	; 249
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <_Z18delete_a_characterPc+0x16>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <_Z18delete_a_characterPc+0x1c>
 3ce:	00 00       	nop
	Peek_A_Boo();
	MrLCDsCrib = 0;
}
void delete_a_character(char *character)
{
	while(*character > 0)
 3d0:	88 81       	ld	r24, Y
 3d2:	88 23       	and	r24, r24
 3d4:	a1 f7       	brne	.-24     	; 0x3be <_Z18delete_a_characterPc+0xc>
		*character--;
		Send_A_Character(*character);
		_delay_ms(1);
	}
	
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <_Z13Send_A_StringPc>:
void Send_A_String(char *stringOfCharacters)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
	while(*stringOfCharacters > 0)
 3e2:	88 81       	ld	r24, Y
 3e4:	88 23       	and	r24, r24
 3e6:	61 f0       	breq	.+24     	; 0x400 <_Z13Send_A_StringPc+0x24>
		Send_A_Character(*character);
		_delay_ms(1);
	}
	
}
void Send_A_String(char *stringOfCharacters)
 3e8:	21 96       	adiw	r28, 0x01	; 1
{
	while(*stringOfCharacters > 0)
	{
		Send_A_Character(*stringOfCharacters++);
 3ea:	0e 94 cd 01 	call	0x39a	; 0x39a <_Z16Send_A_Characterc>
 3ee:	8f e0       	ldi	r24, 0x0F	; 15
 3f0:	97 e2       	ldi	r25, 0x27	; 39
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <_Z13Send_A_StringPc+0x16>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <_Z13Send_A_StringPc+0x1c>
 3f8:	00 00       	nop
	}
	
}
void Send_A_String(char *stringOfCharacters)
{
	while(*stringOfCharacters > 0)
 3fa:	89 91       	ld	r24, Y+
 3fc:	88 23       	and	r24, r24
 3fe:	a9 f7       	brne	.-22     	; 0x3ea <_Z13Send_A_StringPc+0xe>
	{
		Send_A_Character(*stringOfCharacters++);
		_delay_ms(40);
	}
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <_Z9transientv>:
 406:	83 e2       	ldi	r24, 0x23	; 35
 408:	94 ef       	ldi	r25, 0xF4	; 244
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <_Z9transientv+0x4>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <_Z9transientv+0xa>
 410:	00 00       	nop
	}
}
void transient(void)
{	
	_delay_ms(250);	
	switch(pressed_key)
 412:	80 91 7e 01 	lds	r24, 0x017E
 416:	87 30       	cpi	r24, 0x07	; 7
 418:	09 f4       	brne	.+2      	; 0x41c <_Z9transientv+0x16>
 41a:	51 c0       	rjmp	.+162    	; 0x4be <__stack+0x5f>
 41c:	88 30       	cpi	r24, 0x08	; 8
 41e:	70 f4       	brcc	.+28     	; 0x43c <_Z9transientv+0x36>
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	79 f1       	breq	.+94     	; 0x482 <__stack+0x23>
 424:	84 30       	cpi	r24, 0x04	; 4
 426:	28 f4       	brcc	.+10     	; 0x432 <_Z9transientv+0x2c>
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	09 f1       	breq	.+66     	; 0x46e <__stack+0xf>
 42c:	82 30       	cpi	r24, 0x02	; 2
 42e:	20 f5       	brcc	.+72     	; 0x478 <__stack+0x19>
 430:	5f c0       	rjmp	.+190    	; 0x4f0 <__stack+0x91>
 432:	85 30       	cpi	r24, 0x05	; 5
 434:	a9 f1       	breq	.+106    	; 0x4a0 <__stack+0x41>
 436:	86 30       	cpi	r24, 0x06	; 6
 438:	c0 f5       	brcc	.+112    	; 0x4aa <__stack+0x4b>
 43a:	2d c0       	rjmp	.+90     	; 0x496 <__stack+0x37>
 43c:	82 34       	cpi	r24, 0x42	; 66
 43e:	d1 f1       	breq	.+116    	; 0x4b4 <__stack+0x55>
 440:	83 34       	cpi	r24, 0x43	; 67
 442:	48 f4       	brcc	.+18     	; 0x456 <_Z9transientv+0x50>
 444:	89 30       	cpi	r24, 0x09	; 9
 446:	09 f4       	brne	.+2      	; 0x44a <_Z9transientv+0x44>
 448:	44 c0       	rjmp	.+136    	; 0x4d2 <__stack+0x73>
 44a:	89 30       	cpi	r24, 0x09	; 9
 44c:	e8 f1       	brcs	.+122    	; 0x4c8 <__stack+0x69>
 44e:	81 34       	cpi	r24, 0x41	; 65
 450:	09 f0       	breq	.+2      	; 0x454 <_Z9transientv+0x4e>
 452:	5c c0       	rjmp	.+184    	; 0x50c <__stack+0xad>
 454:	1b c0       	rjmp	.+54     	; 0x48c <__stack+0x2d>
 456:	84 34       	cpi	r24, 0x44	; 68
 458:	09 f4       	brne	.+2      	; 0x45c <_Z9transientv+0x56>
 45a:	54 c0       	rjmp	.+168    	; 0x504 <__stack+0xa5>
 45c:	84 34       	cpi	r24, 0x44	; 68
 45e:	f0 f1       	brcs	.+124    	; 0x4dc <__stack+0x7d>
 460:	81 35       	cpi	r24, 0x51	; 81
 462:	09 f4       	brne	.+2      	; 0x466 <__stack+0x7>
 464:	40 c0       	rjmp	.+128    	; 0x4e6 <__stack+0x87>
 466:	82 35       	cpi	r24, 0x52	; 82
 468:	09 f0       	breq	.+2      	; 0x46c <__stack+0xd>
 46a:	50 c0       	rjmp	.+160    	; 0x50c <__stack+0xad>
 46c:	46 c0       	rjmp	.+140    	; 0x4fa <__stack+0x9b>
	{
		case 1:
		Send_A_String("1");
 46e:	80 e6       	ldi	r24, 0x60	; 96
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 476:	08 95       	ret
		
		case 2:
		Send_A_String("2");
 478:	82 e6       	ldi	r24, 0x62	; 98
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 480:	08 95       	ret
		
		case 3:
		Send_A_String("3");
 482:	84 e6       	ldi	r24, 0x64	; 100
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 48a:	08 95       	ret
		
		case 'A':
		Send_A_String("A");
 48c:	86 e6       	ldi	r24, 0x66	; 102
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 494:	08 95       	ret
		
		case 4:
		Send_A_String("4");
 496:	88 e6       	ldi	r24, 0x68	; 104
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 49e:	08 95       	ret
		
		case 5:
		Send_A_String("5");
 4a0:	8a e6       	ldi	r24, 0x6A	; 106
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 4a8:	08 95       	ret
		
		case 6:
		Send_A_String("6");
 4aa:	8c e6       	ldi	r24, 0x6C	; 108
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 4b2:	08 95       	ret
		
		case 'B':
		Send_A_String("B");
 4b4:	8e e6       	ldi	r24, 0x6E	; 110
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 4bc:	08 95       	ret
		
		case 7:
		Send_A_String("7");
 4be:	80 e7       	ldi	r24, 0x70	; 112
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 4c6:	08 95       	ret
		
		case 8:
		Send_A_String("8");
 4c8:	82 e7       	ldi	r24, 0x72	; 114
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 4d0:	08 95       	ret
		
		case 9:
		Send_A_String("9");
 4d2:	84 e7       	ldi	r24, 0x74	; 116
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 4da:	08 95       	ret
		
		case 'C':
		Send_A_String("C");
 4dc:	86 e7       	ldi	r24, 0x76	; 118
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 4e4:	08 95       	ret
		
		case 'Q':
		Send_A_String("*");
 4e6:	88 e7       	ldi	r24, 0x78	; 120
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 4ee:	08 95       	ret
		
		case 0:
		Send_A_String("0");
 4f0:	8a e7       	ldi	r24, 0x7A	; 122
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 4f8:	08 95       	ret
		
		case 'R':
		Send_A_String("#");
 4fa:	8c e7       	ldi	r24, 0x7C	; 124
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
		break;
 502:	08 95       	ret
		
		case 'D':
		Send_A_String("D");
 504:	8e e7       	ldi	r24, 0x7E	; 126
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 50c:	08 95       	ret

0000050e <_Z23Send_A_String_instantlyPc>:
		Send_A_Character(*stringOfCharacters++);
		_delay_ms(40);
	}
}
void Send_A_String_instantly(char *stringOfCharacters)
{
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	ec 01       	movw	r28, r24
	while(*stringOfCharacters > 0)
 514:	88 81       	ld	r24, Y
 516:	88 23       	and	r24, r24
 518:	31 f0       	breq	.+12     	; 0x526 <_Z23Send_A_String_instantlyPc+0x18>
	{
		Send_A_Character(*stringOfCharacters++);
		_delay_ms(40);
	}
}
void Send_A_String_instantly(char *stringOfCharacters)
 51a:	21 96       	adiw	r28, 0x01	; 1
{
	while(*stringOfCharacters > 0)
	{
		Send_A_Character(*stringOfCharacters++);
 51c:	0e 94 cd 01 	call	0x39a	; 0x39a <_Z16Send_A_Characterc>
		_delay_ms(40);
	}
}
void Send_A_String_instantly(char *stringOfCharacters)
{
	while(*stringOfCharacters > 0)
 520:	89 91       	ld	r24, Y+
 522:	88 23       	and	r24, r24
 524:	d9 f7       	brne	.-10     	; 0x51c <_Z23Send_A_String_instantlyPc+0xe>
	{
		Send_A_Character(*stringOfCharacters++);
	}
}
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <_Z10LCD_line_1v>:
 52c:	83 ef       	ldi	r24, 0xF3	; 243
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <_Z10LCD_line_1v+0x4>
 534:	00 c0       	rjmp	.+0      	; 0x536 <_Z10LCD_line_1v+0xa>
 536:	00 00       	nop

void LCD_line_1 (void)
{
	_delay_ms(2);
	Send_A_Command(0x80);
 538:	80 e8       	ldi	r24, 0x80	; 128
 53a:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 53e:	83 ef       	ldi	r24, 0xF3	; 243
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <_Z10LCD_line_1v+0x16>
 546:	00 c0       	rjmp	.+0      	; 0x548 <_Z10LCD_line_1v+0x1c>
 548:	00 00       	nop
	_delay_ms(2);
}
 54a:	08 95       	ret

0000054c <_Z10LCD_line_2v>:
 54c:	83 ef       	ldi	r24, 0xF3	; 243
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <_Z10LCD_line_2v+0x4>
 554:	00 c0       	rjmp	.+0      	; 0x556 <_Z10LCD_line_2v+0xa>
 556:	00 00       	nop
void LCD_line_2 (void)
{
	_delay_ms(2);
	Send_A_Command(0xC0);
 558:	80 ec       	ldi	r24, 0xC0	; 192
 55a:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 55e:	83 ef       	ldi	r24, 0xF3	; 243
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	01 97       	sbiw	r24, 0x01	; 1
 564:	f1 f7       	brne	.-4      	; 0x562 <_Z10LCD_line_2v+0x16>
 566:	00 c0       	rjmp	.+0      	; 0x568 <_Z10LCD_line_2v+0x1c>
 568:	00 00       	nop
	_delay_ms(2);
}
 56a:	08 95       	ret

0000056c <_Z10LCD_line_3v>:
 56c:	83 ef       	ldi	r24, 0xF3	; 243
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <_Z10LCD_line_3v+0x4>
 574:	00 c0       	rjmp	.+0      	; 0x576 <_Z10LCD_line_3v+0xa>
 576:	00 00       	nop
void LCD_line_3 (void)
{
	_delay_ms(2);
	Send_A_Command(0x94);
 578:	84 e9       	ldi	r24, 0x94	; 148
 57a:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 57e:	83 ef       	ldi	r24, 0xF3	; 243
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <_Z10LCD_line_3v+0x16>
 586:	00 c0       	rjmp	.+0      	; 0x588 <_Z10LCD_line_3v+0x1c>
 588:	00 00       	nop
	_delay_ms(2);
}
 58a:	08 95       	ret

0000058c <_Z10LCD_line_4v>:
 58c:	83 ef       	ldi	r24, 0xF3	; 243
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <_Z10LCD_line_4v+0x4>
 594:	00 c0       	rjmp	.+0      	; 0x596 <_Z10LCD_line_4v+0xa>
 596:	00 00       	nop
void LCD_line_4 (void)
{
	_delay_ms(2);
	Send_A_Command(0xD4);
 598:	84 ed       	ldi	r24, 0xD4	; 212
 59a:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 59e:	83 ef       	ldi	r24, 0xF3	; 243
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <_Z10LCD_line_4v+0x16>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <_Z10LCD_line_4v+0x1c>
 5a8:	00 00       	nop
	_delay_ms(2);
}
 5aa:	08 95       	ret

000005ac <_Z15resetParametersv>:
 5ac:	85 ea       	ldi	r24, 0xA5	; 165
 5ae:	9e e0       	ldi	r25, 0x0E	; 14
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <_Z15resetParametersv+0x4>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <_Z15resetParametersv+0xa>
 5b6:	00 00       	nop
}

void resetParameters(void)
{
	_delay_ms(15);
	Send_A_Command(0x01);//clrscr();
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 5be:	83 ef       	ldi	r24, 0xF3	; 243
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <_Z15resetParametersv+0x16>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <_Z15resetParametersv+0x1c>
 5c8:	00 00       	nop
	_delay_ms(2);
	
	LCD_line_1();
 5ca:	0e 94 96 02 	call	0x52c	; 0x52c <_Z10LCD_line_1v>
 5ce:	83 ef       	ldi	r24, 0xF3	; 243
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <_Z15resetParametersv+0x26>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <_Z15resetParametersv+0x2c>
 5d8:	00 00       	nop
	_delay_ms(2);
	Send_A_String("SERVESTER VENDING");
 5da:	80 e8       	ldi	r24, 0x80	; 128
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 5e2:	83 ef       	ldi	r24, 0xF3	; 243
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <_Z15resetParametersv+0x3a>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <_Z15resetParametersv+0x40>
 5ec:	00 00       	nop
	_delay_ms(2);
	
	LCD_line_2();
 5ee:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z10LCD_line_2v>
 5f2:	83 ef       	ldi	r24, 0xF3	; 243
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <_Z15resetParametersv+0x4a>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <_Z15resetParametersv+0x50>
 5fc:	00 00       	nop
	_delay_ms(2);
	Send_A_String("Download APP to Shop");
 5fe:	82 e9       	ldi	r24, 0x92	; 146
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 606:	83 ef       	ldi	r24, 0xF3	; 243
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <_Z15resetParametersv+0x5e>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <_Z15resetParametersv+0x64>
 610:	00 00       	nop
	_delay_ms(2);
	
	LCD_line_3();
 612:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z10LCD_line_3v>
 616:	83 ef       	ldi	r24, 0xF3	; 243
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <_Z15resetParametersv+0x6e>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <_Z15resetParametersv+0x74>
 620:	00 00       	nop
	_delay_ms(2);
	Send_A_String("  Type 'SERVESTER' ");
 622:	87 ea       	ldi	r24, 0xA7	; 167
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 62a:	83 ef       	ldi	r24, 0xF3	; 243
 62c:	91 e0       	ldi	r25, 0x01	; 1
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <_Z15resetParametersv+0x82>
 632:	00 c0       	rjmp	.+0      	; 0x634 <_Z15resetParametersv+0x88>
 634:	00 00       	nop
	_delay_ms(2);
	
	LCD_line_4();
 636:	0e 94 c6 02 	call	0x58c	; 0x58c <_Z10LCD_line_4v>
 63a:	83 ef       	ldi	r24, 0xF3	; 243
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <_Z15resetParametersv+0x92>
 642:	00 c0       	rjmp	.+0      	; 0x644 <_Z15resetParametersv+0x98>
 644:	00 00       	nop
	_delay_ms(2);
	Send_A_String("For Help: 7737698200");
 646:	8b eb       	ldi	r24, 0xBB	; 187
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 64e:	83 ef       	ldi	r24, 0xF3	; 243
 650:	91 e0       	ldi	r25, 0x01	; 1
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <_Z15resetParametersv+0xa6>
 656:	00 c0       	rjmp	.+0      	; 0x658 <_Z15resetParametersv+0xac>
 658:	00 00       	nop
 65a:	83 ec       	ldi	r24, 0xC3	; 195
 65c:	99 e0       	ldi	r25, 0x09	; 9
 65e:	01 97       	sbiw	r24, 0x01	; 1
 660:	f1 f7       	brne	.-4      	; 0x65e <_Z15resetParametersv+0xb2>
 662:	00 c0       	rjmp	.+0      	; 0x664 <_Z15resetParametersv+0xb8>
 664:	00 00       	nop
	_delay_ms(2);
	
	_delay_ms(10);
	
	pressed = 0;
 666:	10 92 82 01 	sts	0x0182, r1
	row = 0;
 66a:	10 92 81 01 	sts	0x0181, r1
	column = 0;
 66e:	10 92 80 01 	sts	0x0180, r1
	
	pressed_key = 0;
 672:	10 92 7e 01 	sts	0x017E, r1
	OTP[4]=0;OTP[3]=0;OTP[2]=0;OTP[1]=0;OTP[0]=0;
 676:	10 92 7d 01 	sts	0x017D, r1
 67a:	10 92 7c 01 	sts	0x017C, r1
 67e:	10 92 7b 01 	sts	0x017B, r1
 682:	10 92 7a 01 	sts	0x017A, r1
 686:	10 92 79 01 	sts	0x0179, r1
 68a:	10 92 78 01 	sts	0x0178, r1
 68e:	10 92 77 01 	sts	0x0177, r1
 692:	10 92 76 01 	sts	0x0176, r1
 696:	10 92 75 01 	sts	0x0175, r1
 69a:	10 92 74 01 	sts	0x0174, r1
	i = 4;
 69e:	84 e0       	ldi	r24, 0x04	; 4
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	90 93 6d 01 	sts	0x016D, r25
 6a6:	80 93 6c 01 	sts	0x016C, r24
	password = 0;
 6aa:	10 92 73 01 	sts	0x0173, r1
 6ae:	10 92 72 01 	sts	0x0172, r1
	sensor_PARAMETER = 0;
 6b2:	10 92 70 01 	sts	0x0170, r1
	commParameter = false;
 6b6:	10 92 7f 01 	sts	0x017F, r1
	packet = 0;
 6ba:	10 92 71 01 	sts	0x0171, r1
	t=0;
 6be:	10 92 6f 01 	sts	0x016F, r1
	u=0;
 6c2:	10 92 6e 01 	sts	0x016E, r1
	//SPDR=0;
}
 6c6:	08 95       	ret

000006c8 <_Z16Clear_LCD_line_1v>:
 6c8:	83 ef       	ldi	r24, 0xF3	; 243
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	01 97       	sbiw	r24, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <_Z16Clear_LCD_line_1v+0x4>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <_Z16Clear_LCD_line_1v+0xa>
 6d2:	00 00       	nop
}

void Clear_LCD_line_1 (void)
{
	_delay_ms(2);
	Send_A_Command(0x80);
 6d4:	80 e8       	ldi	r24, 0x80	; 128
 6d6:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 6da:	83 ef       	ldi	r24, 0xF3	; 243
 6dc:	91 e0       	ldi	r25, 0x01	; 1
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	f1 f7       	brne	.-4      	; 0x6de <_Z16Clear_LCD_line_1v+0x16>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <_Z16Clear_LCD_line_1v+0x1c>
 6e4:	00 00       	nop
 6e6:	83 ef       	ldi	r24, 0xF3	; 243
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <_Z16Clear_LCD_line_1v+0x22>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <_Z16Clear_LCD_line_1v+0x28>
 6f0:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
	Send_A_String_instantly("                    ");
 6f2:	80 ed       	ldi	r24, 0xD0	; 208
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 87 02 	call	0x50e	; 0x50e <_Z23Send_A_String_instantlyPc>
 6fa:	83 ef       	ldi	r24, 0xF3	; 243
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	f1 f7       	brne	.-4      	; 0x6fe <_Z16Clear_LCD_line_1v+0x36>
 702:	00 c0       	rjmp	.+0      	; 0x704 <_Z16Clear_LCD_line_1v+0x3c>
 704:	00 00       	nop
	_delay_ms(2);
}
 706:	08 95       	ret

00000708 <_Z20sensor_COMM_Functionv>:
		}
	}
}

void sensor_COMM_Function(void)	
{		
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
	if (sensor_PARAMETER == 1)
 70c:	80 91 70 01 	lds	r24, 0x0170
 710:	81 30       	cpi	r24, 0x01	; 1
 712:	09 f0       	breq	.+2      	; 0x716 <_Z20sensor_COMM_Functionv+0xe>
 714:	66 c0       	rjmp	.+204    	; 0x7e2 <_Z20sensor_COMM_Functionv+0xda>
	{
		Clear_LCD_line_1();
 716:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z16Clear_LCD_line_1v>
		LCD_line_1();
 71a:	0e 94 96 02 	call	0x52c	; 0x52c <_Z10LCD_line_1v>
 71e:	83 ef       	ldi	r24, 0xF3	; 243
 720:	91 e0       	ldi	r25, 0x01	; 1
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <_Z20sensor_COMM_Functionv+0x1a>
 726:	00 c0       	rjmp	.+0      	; 0x728 <_Z20sensor_COMM_Functionv+0x20>
 728:	00 00       	nop
		_delay_ms(2);
		Send_A_String("Thank You :-)");
 72a:	85 ee       	ldi	r24, 0xE5	; 229
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 732:	a3 ef       	ldi	r26, 0xF3	; 243
 734:	b1 e0       	ldi	r27, 0x01	; 1
 736:	11 97       	sbiw	r26, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <_Z20sensor_COMM_Functionv+0x2e>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <_Z20sensor_COMM_Functionv+0x34>
 73c:	00 00       	nop
 73e:	8f e9       	ldi	r24, 0x9F	; 159
 740:	96 e8       	ldi	r25, 0x86	; 134
 742:	a1 e0       	ldi	r26, 0x01	; 1
 744:	81 50       	subi	r24, 0x01	; 1
 746:	90 40       	sbci	r25, 0x00	; 0
 748:	a0 40       	sbci	r26, 0x00	; 0
 74a:	e1 f7       	brne	.-8      	; 0x744 <_Z20sensor_COMM_Functionv+0x3c>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <_Z20sensor_COMM_Functionv+0x46>
 74e:	00 00       	nop
		_delay_ms(2);
		_delay_ms(500);
		
		sensor_PARAMETER = 0;
 750:	10 92 70 01 	sts	0x0170, r1
 754:	a3 ec       	ldi	r26, 0xC3	; 195
 756:	b9 e0       	ldi	r27, 0x09	; 9
 758:	11 97       	sbiw	r26, 0x01	; 1
 75a:	f1 f7       	brne	.-4      	; 0x758 <_Z20sensor_COMM_Functionv+0x50>
 75c:	00 c0       	rjmp	.+0      	; 0x75e <_Z20sensor_COMM_Functionv+0x56>
 75e:	00 00       	nop
				packet=0;
				
				Clear_LCD_line_1();
				LCD_line_1();
				_delay_ms(2);
				Send_A_String("Come Again Soon !!");
 760:	c2 e0       	ldi	r28, 0x02	; 2
 762:	d1 e0       	ldi	r29, 0x01	; 1
		sensor_PARAMETER = 0;
		_delay_ms(10);
				
		while (14)
		{
			spi_tranceiver('P');
 764:	80 e5       	ldi	r24, 0x50	; 80
 766:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z14spi_tranceiverh>
			packet = SPDR;
 76a:	8f b1       	in	r24, 0x0f	; 15
 76c:	80 93 71 01 	sts	0x0171, r24
			
			if (packet==221)
 770:	8d 3d       	cpi	r24, 0xDD	; 221
 772:	c1 f3       	breq	.-16     	; 0x764 <_Z20sensor_COMM_Functionv+0x5c>
			{
				//_delay_ms(10);
			}
			
			else
			if (packet == 'o')
 774:	8f 36       	cpi	r24, 0x6F	; 111
 776:	19 f5       	brne	.+70     	; 0x7be <_Z20sensor_COMM_Functionv+0xb6>
			{				
				packet=0;
 778:	10 92 71 01 	sts	0x0171, r1
				
				Clear_LCD_line_1();
 77c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z16Clear_LCD_line_1v>
				LCD_line_1();
 780:	0e 94 96 02 	call	0x52c	; 0x52c <_Z10LCD_line_1v>
 784:	83 ef       	ldi	r24, 0xF3	; 243
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	f1 f7       	brne	.-4      	; 0x788 <_Z20sensor_COMM_Functionv+0x80>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <_Z20sensor_COMM_Functionv+0x86>
 78e:	00 00       	nop
				_delay_ms(2);
				Send_A_String("Come Again :-)");
 790:	83 ef       	ldi	r24, 0xF3	; 243
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 798:	a7 e8       	ldi	r26, 0x87	; 135
 79a:	b3 e1       	ldi	r27, 0x13	; 19
 79c:	11 97       	sbiw	r26, 0x01	; 1
 79e:	f1 f7       	brne	.-4      	; 0x79c <_Z20sensor_COMM_Functionv+0x94>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <_Z20sensor_COMM_Functionv+0x9a>
 7a2:	00 00       	nop
 7a4:	8f e9       	ldi	r24, 0x9F	; 159
 7a6:	96 e8       	ldi	r25, 0x86	; 134
 7a8:	a1 e0       	ldi	r26, 0x01	; 1
 7aa:	81 50       	subi	r24, 0x01	; 1
 7ac:	90 40       	sbci	r25, 0x00	; 0
 7ae:	a0 40       	sbci	r26, 0x00	; 0
 7b0:	e1 f7       	brne	.-8      	; 0x7aa <_Z20sensor_COMM_Functionv+0xa2>
 7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <_Z20sensor_COMM_Functionv+0xac>
 7b4:	00 00       	nop
				_delay_ms(20);
				_delay_ms(500);
				
				commParameter = true;
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	80 93 7f 01 	sts	0x017F, r24
 7bc:	12 c0       	rjmp	.+36     	; 0x7e2 <_Z20sensor_COMM_Functionv+0xda>
				break;
			}
			
			else
			if (packet == 'q')
 7be:	81 37       	cpi	r24, 0x71	; 113
 7c0:	89 f6       	brne	.-94     	; 0x764 <_Z20sensor_COMM_Functionv+0x5c>
			{				
				packet=0;
 7c2:	10 92 71 01 	sts	0x0171, r1
				
				Clear_LCD_line_1();
 7c6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z16Clear_LCD_line_1v>
				LCD_line_1();
 7ca:	0e 94 96 02 	call	0x52c	; 0x52c <_Z10LCD_line_1v>
 7ce:	a3 ef       	ldi	r26, 0xF3	; 243
 7d0:	b1 e0       	ldi	r27, 0x01	; 1
 7d2:	11 97       	sbiw	r26, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <_Z20sensor_COMM_Functionv+0xca>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <_Z20sensor_COMM_Functionv+0xd0>
 7d8:	00 00       	nop
				_delay_ms(2);
				Send_A_String("Come Again Soon !!");
 7da:	ce 01       	movw	r24, r28
 7dc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 7e0:	c1 cf       	rjmp	.-126    	; 0x764 <_Z20sensor_COMM_Functionv+0x5c>
				//_delay_ms(200);					
			}
		}
	}
}
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <_Z15sensor_Functionv>:
		spi_tranceiver('X');				
	}
}
/////////////////
void sensor_Function(void)
{
 7e8:	cf 93       	push	r28
	Send_A_Command(0x01);//clrscr();
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 7f0:	83 ef       	ldi	r24, 0xF3	; 243
 7f2:	91 e0       	ldi	r25, 0x01	; 1
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <_Z15sensor_Functionv+0xc>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <_Z15sensor_Functionv+0x12>
 7fa:	00 00       	nop
	_delay_ms(2);
	Send_A_String("Please Wait...");
 7fc:	85 e1       	ldi	r24, 0x15	; 21
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 804:	a3 ef       	ldi	r26, 0xF3	; 243
 806:	b1 e0       	ldi	r27, 0x01	; 1
 808:	11 97       	sbiw	r26, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <_Z15sensor_Functionv+0x20>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <_Z15sensor_Functionv+0x26>
 80e:	00 00       	nop
		
	while (13) //check dispatch
	{
		if( (bit_is_clear(PINC,2)) ||(bit_is_clear(PINC,3)) ||(bit_is_clear(PINC,4)) ||(bit_is_clear(PINC,5)) ) //product falls
		{
			sensor_PARAMETER = 1;
 810:	c1 e0       	ldi	r28, 0x01	; 1
	Send_A_String("Please Wait...");
	_delay_ms(2);
		
	while (13) //check dispatch
	{
		if( (bit_is_clear(PINC,2)) ||(bit_is_clear(PINC,3)) ||(bit_is_clear(PINC,4)) ||(bit_is_clear(PINC,5)) ) //product falls
 812:	9a 9b       	sbis	0x13, 2	; 19
 814:	06 c0       	rjmp	.+12     	; 0x822 <_Z15sensor_Functionv+0x3a>
 816:	9b 9b       	sbis	0x13, 3	; 19
 818:	04 c0       	rjmp	.+8      	; 0x822 <_Z15sensor_Functionv+0x3a>
 81a:	9c 9b       	sbis	0x13, 4	; 19
 81c:	02 c0       	rjmp	.+4      	; 0x822 <_Z15sensor_Functionv+0x3a>
 81e:	9d 99       	sbic	0x13, 5	; 19
 820:	27 c0       	rjmp	.+78     	; 0x870 <_Z15sensor_Functionv+0x88>
		{
			sensor_PARAMETER = 1;
 822:	c0 93 70 01 	sts	0x0170, r28
 826:	83 ec       	ldi	r24, 0xC3	; 195
 828:	99 e0       	ldi	r25, 0x09	; 9
 82a:	01 97       	sbiw	r24, 0x01	; 1
 82c:	f1 f7       	brne	.-4      	; 0x82a <_Z15sensor_Functionv+0x42>
 82e:	00 c0       	rjmp	.+0      	; 0x830 <_Z15sensor_Functionv+0x48>
 830:	00 00       	nop
			_delay_ms(10);
			sensor_COMM_Function();
 832:	0e 94 84 03 	call	0x708	; 0x708 <_Z20sensor_COMM_Functionv>
			if (commParameter == true)
 836:	80 91 7f 01 	lds	r24, 0x017F
 83a:	88 23       	and	r24, r24
 83c:	51 f3       	breq	.-44     	; 0x812 <_Z15sensor_Functionv+0x2a>
			{
				Clear_LCD_line_1();
 83e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z16Clear_LCD_line_1v>
				LCD_line_1();
 842:	0e 94 96 02 	call	0x52c	; 0x52c <_Z10LCD_line_1v>
				Send_A_String("Please Collect");
 846:	84 e2       	ldi	r24, 0x24	; 36
 848:	91 e0       	ldi	r25, 0x01	; 1
 84a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 84e:	a3 ef       	ldi	r26, 0xF3	; 243
 850:	b1 e0       	ldi	r27, 0x01	; 1
 852:	11 97       	sbiw	r26, 0x01	; 1
 854:	f1 f7       	brne	.-4      	; 0x852 <_Z15sensor_Functionv+0x6a>
 856:	00 c0       	rjmp	.+0      	; 0x858 <_Z15sensor_Functionv+0x70>
 858:	00 00       	nop
 85a:	8f e3       	ldi	r24, 0x3F	; 63
 85c:	9d e0       	ldi	r25, 0x0D	; 13
 85e:	a3 e0       	ldi	r26, 0x03	; 3
 860:	81 50       	subi	r24, 0x01	; 1
 862:	90 40       	sbci	r25, 0x00	; 0
 864:	a0 40       	sbci	r26, 0x00	; 0
 866:	e1 f7       	brne	.-8      	; 0x860 <_Z15sensor_Functionv+0x78>
 868:	00 c0       	rjmp	.+0      	; 0x86a <_Z15sensor_Functionv+0x82>
 86a:	00 00       	nop
// 			{
// 				sensor_PARAMETER = 0;
// 			}
		}
	}
}
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret
				
				break;
			}
		}
		else 
		if ( (bit_is_set(PINC,2)) && (bit_is_set(PINC,3)) && (bit_is_set(PINC,4)) && (bit_is_set(PINC,5)) )//product doesn't fall
 870:	9a 9b       	sbis	0x13, 2	; 19
 872:	cf cf       	rjmp	.-98     	; 0x812 <_Z15sensor_Functionv+0x2a>
 874:	9b 9b       	sbis	0x13, 3	; 19
 876:	cd cf       	rjmp	.-102    	; 0x812 <_Z15sensor_Functionv+0x2a>
 878:	9c 9b       	sbis	0x13, 4	; 19
 87a:	cb cf       	rjmp	.-106    	; 0x812 <_Z15sensor_Functionv+0x2a>
 87c:	9d 9b       	sbis	0x13, 5	; 19
 87e:	c9 cf       	rjmp	.-110    	; 0x812 <_Z15sensor_Functionv+0x2a>
		{
			sensor_PARAMETER = 0;
 880:	10 92 70 01 	sts	0x0170, r1
 884:	c6 cf       	rjmp	.-116    	; 0x812 <_Z15sensor_Functionv+0x2a>

00000886 <_Z10run_keypadv>:
	}

}
void run_keypad(void)
{
	Clear_LCD_line_1();
 886:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z16Clear_LCD_line_1v>
	LCD_line_1();
 88a:	0e 94 96 02 	call	0x52c	; 0x52c <_Z10LCD_line_1v>
 88e:	83 ef       	ldi	r24, 0xF3	; 243
 890:	91 e0       	ldi	r25, 0x01	; 1
 892:	01 97       	sbiw	r24, 0x01	; 1
 894:	f1 f7       	brne	.-4      	; 0x892 <_Z10run_keypadv+0xc>
 896:	00 c0       	rjmp	.+0      	; 0x898 <_Z10run_keypadv+0x12>
 898:	00 00       	nop
	_delay_ms(2);
	Send_A_String("PIN: ");
 89a:	83 e3       	ldi	r24, 0x33	; 51
 89c:	91 e0       	ldi	r25, 0x01	; 1
 89e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 8a2:	83 ef       	ldi	r24, 0xF3	; 243
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	01 97       	sbiw	r24, 0x01	; 1
 8a8:	f1 f7       	brne	.-4      	; 0x8a6 <_Z10run_keypadv+0x20>
 8aa:	00 c0       	rjmp	.+0      	; 0x8ac <_Z10run_keypadv+0x26>
 8ac:	00 00       	nop
	_delay_ms(2);
	
	while(3)	
	{			
		if (bit_is_set(PIND,0) && bit_is_set(PIND,1) && bit_is_set(PIND,2) && bit_is_set(PIND,3))
 8ae:	80 9b       	sbis	0x10, 0	; 16
 8b0:	fe cf       	rjmp	.-4      	; 0x8ae <_Z10run_keypadv+0x28>
 8b2:	81 9b       	sbis	0x10, 1	; 16
 8b4:	fc cf       	rjmp	.-8      	; 0x8ae <_Z10run_keypadv+0x28>
 8b6:	82 9b       	sbis	0x10, 2	; 16
 8b8:	fa cf       	rjmp	.-12     	; 0x8ae <_Z10run_keypadv+0x28>
 8ba:	83 9b       	sbis	0x10, 3	; 16
 8bc:	f8 cf       	rjmp	.-16     	; 0x8ae <_Z10run_keypadv+0x28>
		{				
			detect_key_press();
 8be:	0e 94 49 00 	call	0x92	; 0x92 <_Z16detect_key_pressv>
			detect_key();
 8c2:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z10detect_keyv>
			transient();
 8c6:	0e 94 03 02 	call	0x406	; 0x406 <_Z9transientv>
			OTP_funct();
 8ca:	0e 94 3d 01 	call	0x27a	; 0x27a <_Z9OTP_functv>
			
			if (commParameter == true)
 8ce:	80 91 7f 01 	lds	r24, 0x017F
 8d2:	88 23       	and	r24, r24
 8d4:	61 f3       	breq	.-40     	; 0x8ae <_Z10run_keypadv+0x28>
			{
				PORTD &=~ (1<<PIND4);
 8d6:	94 98       	cbi	0x12, 4	; 18
				PORTD &=~ (1<<PIND5);
 8d8:	95 98       	cbi	0x12, 5	; 18
				PORTD &=~ (1<<PIND6);
 8da:	96 98       	cbi	0x12, 6	; 18
				PORTD &=~ (1<<PIND7);
 8dc:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8de:	93 e0       	ldi	r25, 0x03	; 3
 8e0:	9a 95       	dec	r25
 8e2:	f1 f7       	brne	.-4      	; 0x8e0 <_Z10run_keypadv+0x5a>
 8e4:	00 00       	nop
				break;
			}			
		}			
		
	}
}
 8e6:	08 95       	ret

000008e8 <main>:
	bool t=0;
	bool u=0;
	
int main(void)
{
	MCUCSR |= (1<<JTD);
 8e8:	84 b7       	in	r24, 0x34	; 52
 8ea:	80 68       	ori	r24, 0x80	; 128
 8ec:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= (1<<JTD);
 8ee:	84 b7       	in	r24, 0x34	; 52
 8f0:	80 68       	ori	r24, 0x80	; 128
 8f2:	84 bf       	out	0x34, r24	; 52
	
	DDRB |= (1<<PINB3);
 8f4:	bb 9a       	sbi	0x17, 3	; 23
	PORTB &=~ (1<<PINB3);
 8f6:	c3 98       	cbi	0x18, 3	; 24
	
	DDRD = 0b11110000;
 8f8:	80 ef       	ldi	r24, 0xF0	; 240
 8fa:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001111;
 8fc:	8f e0       	ldi	r24, 0x0F	; 15
 8fe:	82 bb       	out	0x12, r24	; 18
	
	DDRC = 0b00000000;
 900:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;
 902:	8f ef       	ldi	r24, 0xFF	; 255
 904:	85 bb       	out	0x15, r24	; 21
	
	DataDir_MrLCDsControl |= (1<<LightSwitch) | (1<<ReadWrite) | (1<<BiPolarMood);
 906:	87 b3       	in	r24, 0x17	; 23
 908:	87 60       	ori	r24, 0x07	; 7
 90a:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 90c:	85 ea       	ldi	r24, 0xA5	; 165
 90e:	9e e0       	ldi	r25, 0x0E	; 14
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	f1 f7       	brne	.-4      	; 0x910 <main+0x28>
 914:	00 c0       	rjmp	.+0      	; 0x916 <main+0x2e>
 916:	00 00       	nop
		
	_delay_ms(15);
	Send_A_Command(0x01);//clrscr();
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 91e:	a3 ef       	ldi	r26, 0xF3	; 243
 920:	b1 e0       	ldi	r27, 0x01	; 1
 922:	11 97       	sbiw	r26, 0x01	; 1
 924:	f1 f7       	brne	.-4      	; 0x922 <main+0x3a>
 926:	00 c0       	rjmp	.+0      	; 0x928 <main+0x40>
 928:	00 00       	nop
	_delay_ms(2);
	Send_A_Command(0x38);
 92a:	88 e3       	ldi	r24, 0x38	; 56
 92c:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 930:	b0 e1       	ldi	r27, 0x10	; 16
 932:	ba 95       	dec	r27
 934:	f1 f7       	brne	.-4      	; 0x932 <main+0x4a>
 936:	00 c0       	rjmp	.+0      	; 0x938 <main+0x50>
	_delay_us(50);
	Send_A_Command(0b00001100);
 938:	8c e0       	ldi	r24, 0x0C	; 12
 93a:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 93e:	80 e1       	ldi	r24, 0x10	; 16
 940:	8a 95       	dec	r24
 942:	f1 f7       	brne	.-4      	; 0x940 <main+0x58>
 944:	00 c0       	rjmp	.+0      	; 0x946 <main+0x5e>
	_delay_us(50);
	
 	spi_init_slave();
 946:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z14spi_init_slavev>
				break;
			}
			else
			if (packet == 'T')
			{
				commParameter = true;
 94a:	ff 24       	eor	r15, r15
 94c:	f3 94       	inc	r15
				Clear_LCD_line_1();
				LCD_line_1();
				Send_A_String("INVALID PIN");
 94e:	0f 2e       	mov	r0, r31
 950:	f8 e5       	ldi	r31, 0x58	; 88
 952:	af 2e       	mov	r10, r31
 954:	f1 e0       	ldi	r31, 0x01	; 1
 956:	bf 2e       	mov	r11, r31
 958:	f0 2d       	mov	r31, r0
			if (packet == 'f')
			{
				commParameter = true;
				Clear_LCD_line_1();
				LCD_line_1();
				Send_A_String("SORRY!! NO Internet");
 95a:	0f 2e       	mov	r0, r31
 95c:	f4 e4       	ldi	r31, 0x44	; 68
 95e:	cf 2e       	mov	r12, r31
 960:	f1 e0       	ldi	r31, 0x01	; 1
 962:	df 2e       	mov	r13, r31
 964:	f0 2d       	mov	r31, r0
			else			
			if (packet == 'Q')
			{
				Clear_LCD_line_1();
				LCD_line_1();
				Send_A_String("HANG ON !!");
 966:	c9 e3       	ldi	r28, 0x39	; 57
 968:	d1 e0       	ldi	r29, 0x01	; 1
			if (packet == 'q')
			{
				Clear_LCD_line_1();
				LCD_line_1();
				_delay_ms(2);
				Send_A_String("Hmmm...");
 96a:	04 e6       	ldi	r16, 0x64	; 100
 96c:	11 e0       	ldi	r17, 0x01	; 1
	
	while (10)
	{		
		while (9)
		{
			resetParameters();
 96e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z15resetParametersv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 972:	a3 ef       	ldi	r26, 0xF3	; 243
 974:	b1 e0       	ldi	r27, 0x01	; 1
 976:	11 97       	sbiw	r26, 0x01	; 1
 978:	f1 f7       	brne	.-4      	; 0x976 <main+0x8e>
 97a:	00 c0       	rjmp	.+0      	; 0x97c <main+0x94>
 97c:	00 00       	nop
			_delay_ms(2);
			run_keypad();
 97e:	0e 94 43 04 	call	0x886	; 0x886 <_Z10run_keypadv>
			break;
		}
		
		while (8)
		{
			spi_tranceiver('x');
 982:	88 e7       	ldi	r24, 0x78	; 120
 984:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z14spi_tranceiverh>
			packet = SPDR;
 988:	8f b1       	in	r24, 0x0f	; 15
 98a:	80 93 71 01 	sts	0x0171, r24
			Send_A_Character(packet);
 98e:	0e 94 cd 01 	call	0x39a	; 0x39a <_Z16Send_A_Characterc>
			
			if(packet == 255)
 992:	80 91 71 01 	lds	r24, 0x0171
 996:	8f 3f       	cpi	r24, 0xFF	; 255
 998:	11 f4       	brne	.+4      	; 0x99e <main+0xb6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 99a:	00 00       	nop
 99c:	f2 cf       	rjmp	.-28     	; 0x982 <main+0x9a>
			{				
				_delay_us(1);
			}
			else
			if (packet == 'q')//sync achieved
 99e:	81 37       	cpi	r24, 0x71	; 113
 9a0:	19 f4       	brne	.+6      	; 0x9a8 <main+0xc0>
			{
				COMM_Function();
 9a2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_Z13COMM_Functionv>
 9a6:	ed cf       	rjmp	.-38     	; 0x982 <main+0x9a>
			}
			else			
			if (packet == 'Q')
 9a8:	81 35       	cpi	r24, 0x51	; 81
 9aa:	a1 f4       	brne	.+40     	; 0x9d4 <main+0xec>
			{
				Clear_LCD_line_1();
 9ac:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z16Clear_LCD_line_1v>
				LCD_line_1();
 9b0:	0e 94 96 02 	call	0x52c	; 0x52c <_Z10LCD_line_1v>
				Send_A_String("HANG ON !!");
 9b4:	ce 01       	movw	r24, r28
 9b6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9ba:	83 ef       	ldi	r24, 0xF3	; 243
 9bc:	91 e0       	ldi	r25, 0x01	; 1
 9be:	01 97       	sbiw	r24, 0x01	; 1
 9c0:	f1 f7       	brne	.-4      	; 0x9be <main+0xd6>
 9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <main+0xdc>
 9c4:	00 00       	nop
				_delay_ms(2);////
				
				sensor_Function();				
 9c6:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <_Z15sensor_Functionv>
				//check for dispatch
				//sensor control grid
				//sensor_COMM_Function();
				if (commParameter == true)
 9ca:	80 91 7f 01 	lds	r24, 0x017F
 9ce:	88 23       	and	r24, r24
 9d0:	c1 f2       	breq	.-80     	; 0x982 <main+0x9a>
 9d2:	2a c0       	rjmp	.+84     	; 0xa28 <main+0x140>
				{
					break;			
				}
			}
			else
			if (packet == 'f')
 9d4:	86 36       	cpi	r24, 0x66	; 102
 9d6:	99 f4       	brne	.+38     	; 0x9fe <main+0x116>
			{
				commParameter = true;
 9d8:	f0 92 7f 01 	sts	0x017F, r15
				Clear_LCD_line_1();
 9dc:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z16Clear_LCD_line_1v>
				LCD_line_1();
 9e0:	0e 94 96 02 	call	0x52c	; 0x52c <_Z10LCD_line_1v>
				Send_A_String("SORRY!! NO Internet");
 9e4:	c6 01       	movw	r24, r12
 9e6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 9ea:	8f e7       	ldi	r24, 0x7F	; 127
 9ec:	9a e1       	ldi	r25, 0x1A	; 26
 9ee:	a6 e0       	ldi	r26, 0x06	; 6
 9f0:	81 50       	subi	r24, 0x01	; 1
 9f2:	90 40       	sbci	r25, 0x00	; 0
 9f4:	a0 40       	sbci	r26, 0x00	; 0
 9f6:	e1 f7       	brne	.-8      	; 0x9f0 <main+0x108>
 9f8:	00 c0       	rjmp	.+0      	; 0x9fa <main+0x112>
 9fa:	00 00       	nop
 9fc:	15 c0       	rjmp	.+42     	; 0xa28 <main+0x140>
				_delay_ms(2000);////
				
				break;
			}
			else
			if (packet == 'T')
 9fe:	84 35       	cpi	r24, 0x54	; 84
 a00:	09 f0       	breq	.+2      	; 0xa04 <main+0x11c>
 a02:	bf cf       	rjmp	.-130    	; 0x982 <main+0x9a>
			{
				commParameter = true;
 a04:	f0 92 7f 01 	sts	0x017F, r15
				Clear_LCD_line_1();
 a08:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z16Clear_LCD_line_1v>
				LCD_line_1();
 a0c:	0e 94 96 02 	call	0x52c	; 0x52c <_Z10LCD_line_1v>
				Send_A_String("INVALID PIN");
 a10:	c5 01       	movw	r24, r10
 a12:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 a16:	8f e7       	ldi	r24, 0x7F	; 127
 a18:	9a e1       	ldi	r25, 0x1A	; 26
 a1a:	a6 e0       	ldi	r26, 0x06	; 6
 a1c:	81 50       	subi	r24, 0x01	; 1
 a1e:	90 40       	sbci	r25, 0x00	; 0
 a20:	a0 40       	sbci	r26, 0x00	; 0
 a22:	e1 f7       	brne	.-8      	; 0xa1c <main+0x134>
 a24:	00 c0       	rjmp	.+0      	; 0xa26 <main+0x13e>
 a26:	00 00       	nop
						
		}
		
		while (12)
		{									
			spi_tranceiver('O');
 a28:	8f e4       	ldi	r24, 0x4F	; 79
 a2a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z14spi_tranceiverh>
			packet = SPDR;		
 a2e:	8f b1       	in	r24, 0x0f	; 15
 a30:	80 93 71 01 	sts	0x0171, r24
			
			if (packet == 'q')
 a34:	81 37       	cpi	r24, 0x71	; 113
 a36:	c1 f7       	brne	.-16     	; 0xa28 <main+0x140>
			{
				Clear_LCD_line_1();
 a38:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z16Clear_LCD_line_1v>
				LCD_line_1();
 a3c:	0e 94 96 02 	call	0x52c	; 0x52c <_Z10LCD_line_1v>
 a40:	a3 ef       	ldi	r26, 0xF3	; 243
 a42:	b1 e0       	ldi	r27, 0x01	; 1
 a44:	11 97       	sbiw	r26, 0x01	; 1
 a46:	f1 f7       	brne	.-4      	; 0xa44 <main+0x15c>
 a48:	00 c0       	rjmp	.+0      	; 0xa4a <main+0x162>
 a4a:	00 00       	nop
				_delay_ms(2);
				Send_A_String("Hmmm...");
 a4c:	c8 01       	movw	r24, r16
 a4e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z13Send_A_StringPc>
 a52:	83 ef       	ldi	r24, 0xF3	; 243
 a54:	91 e0       	ldi	r25, 0x01	; 1
 a56:	01 97       	sbiw	r24, 0x01	; 1
 a58:	f1 f7       	brne	.-4      	; 0xa56 <main+0x16e>
 a5a:	00 c0       	rjmp	.+0      	; 0xa5c <main+0x174>
 a5c:	00 00       	nop
 a5e:	a7 e8       	ldi	r26, 0x87	; 135
 a60:	b3 e1       	ldi	r27, 0x13	; 19
 a62:	11 97       	sbiw	r26, 0x01	; 1
 a64:	f1 f7       	brne	.-4      	; 0xa62 <main+0x17a>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <main+0x180>
 a68:	00 00       	nop
 a6a:	81 cf       	rjmp	.-254    	; 0x96e <main+0x86>

00000a6c <_Z16Clear_LCD_line_2v>:
 a6c:	83 ef       	ldi	r24, 0xF3	; 243
 a6e:	91 e0       	ldi	r25, 0x01	; 1
 a70:	01 97       	sbiw	r24, 0x01	; 1
 a72:	f1 f7       	brne	.-4      	; 0xa70 <_Z16Clear_LCD_line_2v+0x4>
 a74:	00 c0       	rjmp	.+0      	; 0xa76 <_Z16Clear_LCD_line_2v+0xa>
 a76:	00 00       	nop
	_delay_ms(2);
}
void Clear_LCD_line_2 (void)
{
	_delay_ms(2);
	Send_A_Command(0xC0);
 a78:	80 ec       	ldi	r24, 0xC0	; 192
 a7a:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 a7e:	83 ef       	ldi	r24, 0xF3	; 243
 a80:	91 e0       	ldi	r25, 0x01	; 1
 a82:	01 97       	sbiw	r24, 0x01	; 1
 a84:	f1 f7       	brne	.-4      	; 0xa82 <_Z16Clear_LCD_line_2v+0x16>
 a86:	00 c0       	rjmp	.+0      	; 0xa88 <_Z16Clear_LCD_line_2v+0x1c>
 a88:	00 00       	nop
 a8a:	83 ef       	ldi	r24, 0xF3	; 243
 a8c:	91 e0       	ldi	r25, 0x01	; 1
 a8e:	01 97       	sbiw	r24, 0x01	; 1
 a90:	f1 f7       	brne	.-4      	; 0xa8e <_Z16Clear_LCD_line_2v+0x22>
 a92:	00 c0       	rjmp	.+0      	; 0xa94 <_Z16Clear_LCD_line_2v+0x28>
 a94:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
	Send_A_String_instantly("                    ");
 a96:	80 ed       	ldi	r24, 0xD0	; 208
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 87 02 	call	0x50e	; 0x50e <_Z23Send_A_String_instantlyPc>
 a9e:	83 ef       	ldi	r24, 0xF3	; 243
 aa0:	91 e0       	ldi	r25, 0x01	; 1
 aa2:	01 97       	sbiw	r24, 0x01	; 1
 aa4:	f1 f7       	brne	.-4      	; 0xaa2 <_Z16Clear_LCD_line_2v+0x36>
 aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <_Z16Clear_LCD_line_2v+0x3c>
 aa8:	00 00       	nop
	_delay_ms(2);
}
 aaa:	08 95       	ret

00000aac <_Z16Clear_LCD_line_3v>:
 aac:	83 ef       	ldi	r24, 0xF3	; 243
 aae:	91 e0       	ldi	r25, 0x01	; 1
 ab0:	01 97       	sbiw	r24, 0x01	; 1
 ab2:	f1 f7       	brne	.-4      	; 0xab0 <_Z16Clear_LCD_line_3v+0x4>
 ab4:	00 c0       	rjmp	.+0      	; 0xab6 <_Z16Clear_LCD_line_3v+0xa>
 ab6:	00 00       	nop
void Clear_LCD_line_3 (void)
{
	_delay_ms(2);
	Send_A_Command(0x94);
 ab8:	84 e9       	ldi	r24, 0x94	; 148
 aba:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 abe:	83 ef       	ldi	r24, 0xF3	; 243
 ac0:	91 e0       	ldi	r25, 0x01	; 1
 ac2:	01 97       	sbiw	r24, 0x01	; 1
 ac4:	f1 f7       	brne	.-4      	; 0xac2 <_Z16Clear_LCD_line_3v+0x16>
 ac6:	00 c0       	rjmp	.+0      	; 0xac8 <_Z16Clear_LCD_line_3v+0x1c>
 ac8:	00 00       	nop
 aca:	83 ef       	ldi	r24, 0xF3	; 243
 acc:	91 e0       	ldi	r25, 0x01	; 1
 ace:	01 97       	sbiw	r24, 0x01	; 1
 ad0:	f1 f7       	brne	.-4      	; 0xace <_Z16Clear_LCD_line_3v+0x22>
 ad2:	00 c0       	rjmp	.+0      	; 0xad4 <_Z16Clear_LCD_line_3v+0x28>
 ad4:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
	Send_A_String_instantly("                    ");
 ad6:	80 ed       	ldi	r24, 0xD0	; 208
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	0e 94 87 02 	call	0x50e	; 0x50e <_Z23Send_A_String_instantlyPc>
 ade:	83 ef       	ldi	r24, 0xF3	; 243
 ae0:	91 e0       	ldi	r25, 0x01	; 1
 ae2:	01 97       	sbiw	r24, 0x01	; 1
 ae4:	f1 f7       	brne	.-4      	; 0xae2 <_Z16Clear_LCD_line_3v+0x36>
 ae6:	00 c0       	rjmp	.+0      	; 0xae8 <_Z16Clear_LCD_line_3v+0x3c>
 ae8:	00 00       	nop
	_delay_ms(2);
}
 aea:	08 95       	ret

00000aec <_Z16Clear_LCD_line_4v>:
 aec:	83 ef       	ldi	r24, 0xF3	; 243
 aee:	91 e0       	ldi	r25, 0x01	; 1
 af0:	01 97       	sbiw	r24, 0x01	; 1
 af2:	f1 f7       	brne	.-4      	; 0xaf0 <_Z16Clear_LCD_line_4v+0x4>
 af4:	00 c0       	rjmp	.+0      	; 0xaf6 <_Z16Clear_LCD_line_4v+0xa>
 af6:	00 00       	nop
void Clear_LCD_line_4 (void)
{
	_delay_ms(2);
	Send_A_Command(0xD4);
 af8:	84 ed       	ldi	r24, 0xD4	; 212
 afa:	0e 94 c0 01 	call	0x380	; 0x380 <_Z14Send_A_Commandc>
 afe:	83 ef       	ldi	r24, 0xF3	; 243
 b00:	91 e0       	ldi	r25, 0x01	; 1
 b02:	01 97       	sbiw	r24, 0x01	; 1
 b04:	f1 f7       	brne	.-4      	; 0xb02 <_Z16Clear_LCD_line_4v+0x16>
 b06:	00 c0       	rjmp	.+0      	; 0xb08 <_Z16Clear_LCD_line_4v+0x1c>
 b08:	00 00       	nop
 b0a:	83 ef       	ldi	r24, 0xF3	; 243
 b0c:	91 e0       	ldi	r25, 0x01	; 1
 b0e:	01 97       	sbiw	r24, 0x01	; 1
 b10:	f1 f7       	brne	.-4      	; 0xb0e <_Z16Clear_LCD_line_4v+0x22>
 b12:	00 c0       	rjmp	.+0      	; 0xb14 <_Z16Clear_LCD_line_4v+0x28>
 b14:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
	Send_A_String_instantly("                    ");
 b16:	80 ed       	ldi	r24, 0xD0	; 208
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 87 02 	call	0x50e	; 0x50e <_Z23Send_A_String_instantlyPc>
 b1e:	83 ef       	ldi	r24, 0xF3	; 243
 b20:	91 e0       	ldi	r25, 0x01	; 1
 b22:	01 97       	sbiw	r24, 0x01	; 1
 b24:	f1 f7       	brne	.-4      	; 0xb22 <_Z16Clear_LCD_line_4v+0x36>
 b26:	00 c0       	rjmp	.+0      	; 0xb28 <_Z16Clear_LCD_line_4v+0x3c>
 b28:	00 00       	nop
	_delay_ms(2);
}
 b2a:	08 95       	ret

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
